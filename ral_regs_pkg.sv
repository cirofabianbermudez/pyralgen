// This file was autogenerated by PeakRDL-uvm
package ral_regs_pkg;
    `include "uvm_macros.svh"
    import uvm_pkg::*;
    
    // Reg - tdc_reg
    class tdc_reg extends uvm_reg;
        `uvm_object_utils(tdc_reg)

        rand uvm_reg_field ctrl1;
        rand uvm_reg_field adj1;
        rand uvm_reg_field pxon;
        rand uvm_reg_field feon;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            ctrl1 : coverpoint ctrl1.value[3:0];
            adj1 : coverpoint adj1.value[1:0];
            pxon : coverpoint pxon.value[0:0];
            feon : coverpoint feon.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "tdc_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.ctrl1 = uvm_reg_field::type_id::create("ctrl1");
            this.ctrl1.configure(this, 4, 0, "RW", 0, 'hf, 1, 1, 0);
            this.adj1 = uvm_reg_field::type_id::create("adj1");
            this.adj1.configure(this, 2, 4, "RW", 0, 'h1, 1, 1, 0);
            this.pxon = uvm_reg_field::type_id::create("pxon");
            this.pxon.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.feon = uvm_reg_field::type_id::create("feon");
            this.feon.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : tdc_reg

    // Reg - tdc_ctrl_reg
    class tdc_ctrl_reg extends uvm_reg;
        `uvm_object_utils(tdc_ctrl_reg)

        rand uvm_reg_field ctrl0;
        rand uvm_reg_field adj0;
        rand uvm_reg_field tdcon;
        rand uvm_reg_field endetot;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            ctrl0 : coverpoint ctrl0.value[3:0];
            adj0 : coverpoint adj0.value[1:0];
            tdcon : coverpoint tdcon.value[0:0];
            endetot : coverpoint endetot.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "tdc_ctrl_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.ctrl0 = uvm_reg_field::type_id::create("ctrl0");
            this.ctrl0.configure(this, 4, 0, "RW", 0, 'h0, 1, 1, 0);
            this.adj0 = uvm_reg_field::type_id::create("adj0");
            this.adj0.configure(this, 2, 4, "RW", 0, 'h1, 1, 1, 0);
            this.tdcon = uvm_reg_field::type_id::create("tdcon");
            this.tdcon.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.endetot = uvm_reg_field::type_id::create("endetot");
            this.endetot.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : tdc_ctrl_reg

    // Reg - tdc_tpsel_reg
    class tdc_tpsel_reg extends uvm_reg;
        `uvm_object_utils(tdc_tpsel_reg)

        rand uvm_reg_field ch_sel;
        rand uvm_reg_field ch_mode;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            ch_sel : coverpoint ch_sel.value[5:0];
            ch_mode : coverpoint ch_mode.value[1:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "tdc_tpsel_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.ch_sel = uvm_reg_field::type_id::create("ch_sel");
            this.ch_sel.configure(this, 6, 0, "RW", 0, 'h0, 1, 1, 0);
            this.ch_mode = uvm_reg_field::type_id::create("ch_mode");
            this.ch_mode.configure(this, 2, 6, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : tdc_tpsel_reg

    // Reg - afe_tdc_global_reg
    class afe_tdc_global_reg extends uvm_reg;
        `uvm_object_utils(afe_tdc_global_reg)

        rand uvm_reg_field selcaltime;
        rand uvm_reg_field calmode;
        rand uvm_reg_field entimeout;
        rand uvm_reg_field en_p_vfb;
        rand uvm_reg_field en_p_vldo;
        rand uvm_reg_field en_p_vth;
        rand uvm_reg_field con_pad;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            selcaltime : coverpoint selcaltime.value[1:0];
            calmode : coverpoint calmode.value[0:0];
            entimeout : coverpoint entimeout.value[0:0];
            en_p_vfb : coverpoint en_p_vfb.value[0:0];
            en_p_vldo : coverpoint en_p_vldo.value[0:0];
            en_p_vth : coverpoint en_p_vth.value[0:0];
            con_pad : coverpoint con_pad.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "afe_tdc_global_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.selcaltime = uvm_reg_field::type_id::create("selcaltime");
            this.selcaltime.configure(this, 2, 0, "RW", 0, 'h3, 1, 1, 0);
            this.calmode = uvm_reg_field::type_id::create("calmode");
            this.calmode.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.entimeout = uvm_reg_field::type_id::create("entimeout");
            this.entimeout.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.en_p_vfb = uvm_reg_field::type_id::create("en_p_vfb");
            this.en_p_vfb.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.en_p_vldo = uvm_reg_field::type_id::create("en_p_vldo");
            this.en_p_vldo.configure(this, 1, 5, "RW", 0, 'h0, 1, 1, 0);
            this.en_p_vth = uvm_reg_field::type_id::create("en_p_vth");
            this.en_p_vth.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.con_pad = uvm_reg_field::type_id::create("con_pad");
            this.con_pad.configure(this, 1, 7, "RW", 0, 'h1, 1, 1, 0);
        endfunction : build
    endclass : afe_tdc_global_reg

    // Reg - afe_global0_reg
    class afe_global0_reg extends uvm_reg;
        `uvm_object_utils(afe_global0_reg)

        rand uvm_reg_field dac_icsa;
        rand uvm_reg_field dac_idisc;
        rand uvm_reg_field afe_auto;
        rand uvm_reg_field afe_lb;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_icsa : coverpoint dac_icsa.value[2:0];
            dac_idisc : coverpoint dac_idisc.value[2:0];
            afe_auto : coverpoint afe_auto.value[0:0];
            afe_lb : coverpoint afe_lb.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "afe_global0_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_icsa = uvm_reg_field::type_id::create("dac_icsa");
            this.dac_icsa.configure(this, 3, 0, "RW", 0, 'h0, 1, 1, 0);
            this.dac_idisc = uvm_reg_field::type_id::create("dac_idisc");
            this.dac_idisc.configure(this, 3, 3, "RW", 0, 'h0, 1, 1, 0);
            this.afe_auto = uvm_reg_field::type_id::create("afe_auto");
            this.afe_auto.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.afe_lb = uvm_reg_field::type_id::create("afe_lb");
            this.afe_lb.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : afe_global0_reg

    // Reg - afe_global1_reg
    class afe_global1_reg extends uvm_reg;
        `uvm_object_utils(afe_global1_reg)

        rand uvm_reg_field dac_ikrum;
        rand uvm_reg_field sel_vinjmux;
        rand uvm_reg_field en_p_vinj;
        rand uvm_reg_field ext_dc;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_ikrum : coverpoint dac_ikrum.value[2:0];
            sel_vinjmux : coverpoint sel_vinjmux.value[2:0];
            en_p_vinj : coverpoint en_p_vinj.value[0:0];
            ext_dc : coverpoint ext_dc.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "afe_global1_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_ikrum = uvm_reg_field::type_id::create("dac_ikrum");
            this.dac_ikrum.configure(this, 3, 0, "RW", 0, 'h0, 1, 1, 0);
            this.sel_vinjmux = uvm_reg_field::type_id::create("sel_vinjmux");
            this.sel_vinjmux.configure(this, 3, 3, "RW", 0, 'h0, 1, 1, 0);
            this.en_p_vinj = uvm_reg_field::type_id::create("en_p_vinj");
            this.en_p_vinj.configure(this, 1, 6, "RW", 0, 'h0, 1, 1, 0);
            this.ext_dc = uvm_reg_field::type_id::create("ext_dc");
            this.ext_dc.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : afe_global1_reg

    // Reg - dac_vth_h_reg
    class dac_vth_h_reg extends uvm_reg;
        `uvm_object_utils(dac_vth_h_reg)

        rand uvm_reg_field dac_vth_h;
        rand uvm_reg_field en_dac;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_vth_h : coverpoint dac_vth_h.value[6:0];
            en_dac : coverpoint en_dac.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "dac_vth_h_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_vth_h = uvm_reg_field::type_id::create("dac_vth_h");
            this.dac_vth_h.configure(this, 7, 0, "RW", 0, 'h7f, 1, 1, 0);
            this.en_dac = uvm_reg_field::type_id::create("en_dac");
            this.en_dac.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : dac_vth_h_reg

    // Reg - dac_vth_l_reg
    class dac_vth_l_reg extends uvm_reg;
        `uvm_object_utils(dac_vth_l_reg)

        rand uvm_reg_field dac_vth_l;
        rand uvm_reg_field en_dac;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_vth_l : coverpoint dac_vth_l.value[6:0];
            en_dac : coverpoint en_dac.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "dac_vth_l_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_vth_l = uvm_reg_field::type_id::create("dac_vth_l");
            this.dac_vth_l.configure(this, 7, 0, "RW", 0, 'h7f, 1, 1, 0);
            this.en_dac = uvm_reg_field::type_id::create("en_dac");
            this.en_dac.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : dac_vth_l_reg

    // Reg - dac_vinj_h_reg
    class dac_vinj_h_reg extends uvm_reg;
        `uvm_object_utils(dac_vinj_h_reg)

        rand uvm_reg_field dac_vinj_h;
        rand uvm_reg_field en_dac;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_vinj_h : coverpoint dac_vinj_h.value[6:0];
            en_dac : coverpoint en_dac.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "dac_vinj_h_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_vinj_h = uvm_reg_field::type_id::create("dac_vinj_h");
            this.dac_vinj_h.configure(this, 7, 0, "RW", 0, 'h0, 1, 1, 0);
            this.en_dac = uvm_reg_field::type_id::create("en_dac");
            this.en_dac.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : dac_vinj_h_reg

    // Reg - dac_vinj_l_reg
    class dac_vinj_l_reg extends uvm_reg;
        `uvm_object_utils(dac_vinj_l_reg)

        rand uvm_reg_field dac_vinj_l;
        rand uvm_reg_field en_dac;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_vinj_l : coverpoint dac_vinj_l.value[6:0];
            en_dac : coverpoint en_dac.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "dac_vinj_l_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_vinj_l = uvm_reg_field::type_id::create("dac_vinj_l");
            this.dac_vinj_l.configure(this, 7, 0, "RW", 0, 'h0, 1, 1, 0);
            this.en_dac = uvm_reg_field::type_id::create("en_dac");
            this.en_dac.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : dac_vinj_l_reg

    // Reg - dac_vldo_reg
    class dac_vldo_reg extends uvm_reg;
        `uvm_object_utils(dac_vldo_reg)

        rand uvm_reg_field dac_vldo;
        rand uvm_reg_field en_dac;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_vldo : coverpoint dac_vldo.value[6:0];
            en_dac : coverpoint en_dac.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "dac_vldo_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_vldo = uvm_reg_field::type_id::create("dac_vldo");
            this.dac_vldo.configure(this, 7, 0, "RW", 0, 'h3f, 1, 1, 0);
            this.en_dac = uvm_reg_field::type_id::create("en_dac");
            this.en_dac.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : dac_vldo_reg

    // Reg - dac_vfb_reg
    class dac_vfb_reg extends uvm_reg;
        `uvm_object_utils(dac_vfb_reg)

        rand uvm_reg_field dac_vfb;
        rand uvm_reg_field en_dac;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dac_vfb : coverpoint dac_vfb.value[6:0];
            en_dac : coverpoint en_dac.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "dac_vfb_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dac_vfb = uvm_reg_field::type_id::create("dac_vfb");
            this.dac_vfb.configure(this, 7, 0, "RW", 0, 'h3f, 1, 1, 0);
            this.en_dac = uvm_reg_field::type_id::create("en_dac");
            this.en_dac.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : dac_vfb_reg

    // Reg - ftdac_reg
    class ftdac_reg extends uvm_reg;
        `uvm_object_utils(ftdac_reg)

        rand uvm_reg_field ft_dac0;
        rand uvm_reg_field ft_dac1;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            ft_dac0 : coverpoint ft_dac0.value[3:0];
            ft_dac1 : coverpoint ft_dac1.value[3:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "ftdac_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.ft_dac0 = uvm_reg_field::type_id::create("ft_dac0");
            this.ft_dac0.configure(this, 4, 0, "RW", 0, 'hf, 1, 1, 0);
            this.ft_dac1 = uvm_reg_field::type_id::create("ft_dac1");
            this.ft_dac1.configure(this, 4, 4, "RW", 0, 'hf, 1, 1, 0);
        endfunction : build
    endclass : ftdac_reg

    // Reg - cmd_reg
    class cmd_reg extends uvm_reg;
        `uvm_object_utils(cmd_reg)

        rand uvm_reg_field dcoc_g0;
        rand uvm_reg_field dcoc_g1;
        rand uvm_reg_field dcoc_g2;
        rand uvm_reg_field dcoc_g3;
        rand uvm_reg_field calseldco;
        rand uvm_reg_field empty;
        rand uvm_reg_field daqres;

        // Function: coverage
        covergroup cg_vals;
            option.per_instance = 1;
            dcoc_g0 : coverpoint dcoc_g0.value[0:0];
            dcoc_g1 : coverpoint dcoc_g1.value[0:0];
            dcoc_g2 : coverpoint dcoc_g2.value[0:0];
            dcoc_g3 : coverpoint dcoc_g3.value[0:0];
            calseldco : coverpoint calseldco.value[0:0];
            empty : coverpoint empty.value[1:0];
            daqres : coverpoint daqres.value[0:0];
        endgroup : cg_vals

        // Function: new
        function new(string name = "cmd_reg");
            super.new(name, 8, build_coverage(UVM_CVR_FIELD_VALS));
            add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
        	if (has_coverage(UVM_CVR_FIELD_VALS)) begin
                cg_vals = new();
                cg_vals.set_inst_name(name);
            end
        endfunction : new

        // Function: sample_values
        virtual function void sample_values();
           super.sample_values();
           if (get_coverage(UVM_CVR_FIELD_VALS)) begin
               cg_vals.sample();
           end
        endfunction : sample_values

        // Function build
        virtual function void build();
            this.dcoc_g0 = uvm_reg_field::type_id::create("dcoc_g0");
            this.dcoc_g0.configure(this, 1, 0, "RW", 0, 'h0, 1, 1, 0);
            this.dcoc_g1 = uvm_reg_field::type_id::create("dcoc_g1");
            this.dcoc_g1.configure(this, 1, 1, "RW", 0, 'h0, 1, 1, 0);
            this.dcoc_g2 = uvm_reg_field::type_id::create("dcoc_g2");
            this.dcoc_g2.configure(this, 1, 2, "RW", 0, 'h0, 1, 1, 0);
            this.dcoc_g3 = uvm_reg_field::type_id::create("dcoc_g3");
            this.dcoc_g3.configure(this, 1, 3, "RW", 0, 'h0, 1, 1, 0);
            this.calseldco = uvm_reg_field::type_id::create("calseldco");
            this.calseldco.configure(this, 1, 4, "RW", 0, 'h0, 1, 1, 0);
            this.empty = uvm_reg_field::type_id::create("empty");
            this.empty.configure(this, 2, 5, "RW", 0, 'h0, 1, 1, 0);
            this.daqres = uvm_reg_field::type_id::create("daqres");
            this.daqres.configure(this, 1, 7, "RW", 0, 'h0, 1, 1, 0);
        endfunction : build
    endclass : cmd_reg

    // Map Coverage Object
    class mattonella_reg_block_default_map_coverage extends uvm_object;
        `uvm_object_utils(mattonella_reg_block_default_map_coverage)

        covergroup ra_cov(string name) with function sample(uvm_reg_addr_t addr, bit is_read);

            option.per_instance = 1;
            option.name = name;

            ADDR: coverpoint addr {
                bins SET_TDC_DCO1_00 = { 'h0 };
                bins SET_TDC_DCO1_01 = { 'h1 };
                bins SET_TDC_DCO1_02 = { 'h2 };
                bins SET_TDC_DCO1_03 = { 'h3 };
                bins SET_TDC_DCO1_04 = { 'h4 };
                bins SET_TDC_DCO1_05 = { 'h5 };
                bins SET_TDC_DCO1_06 = { 'h6 };
                bins SET_TDC_DCO1_07 = { 'h7 };
                bins SET_TDC_DCO1_08 = { 'h8 };
                bins SET_TDC_DCO1_09 = { 'h9 };
                bins SET_TDC_DCO1_10 = { 'ha };
                bins SET_TDC_DCO1_11 = { 'hb };
                bins SET_TDC_DCO1_12 = { 'hc };
                bins SET_TDC_DCO1_13 = { 'hd };
                bins SET_TDC_DCO1_14 = { 'he };
                bins SET_TDC_DCO1_15 = { 'hf };
                bins SET_TDC_DCO1_16 = { 'h10 };
                bins SET_TDC_DCO1_17 = { 'h11 };
                bins SET_TDC_DCO1_18 = { 'h12 };
                bins SET_TDC_DCO1_19 = { 'h13 };
                bins SET_TDC_DCO1_20 = { 'h14 };
                bins SET_TDC_DCO1_21 = { 'h15 };
                bins SET_TDC_DCO1_22 = { 'h16 };
                bins SET_TDC_DCO1_23 = { 'h17 };
                bins SET_TDC_DCO1_24 = { 'h18 };
                bins SET_TDC_DCO1_25 = { 'h19 };
                bins SET_TDC_DCO1_26 = { 'h1a };
                bins SET_TDC_DCO1_27 = { 'h1b };
                bins SET_TDC_DCO1_28 = { 'h1c };
                bins SET_TDC_DCO1_29 = { 'h1d };
                bins SET_TDC_DCO1_30 = { 'h1e };
                bins SET_TDC_DCO1_31 = { 'h1f };
                bins SET_TDC_DCO1_32 = { 'h20 };
                bins SET_TDC_DCO1_33 = { 'h21 };
                bins SET_TDC_DCO1_34 = { 'h22 };
                bins SET_TDC_DCO1_35 = { 'h23 };
                bins SET_TDC_DCO1_36 = { 'h24 };
                bins SET_TDC_DCO1_37 = { 'h25 };
                bins SET_TDC_DCO1_38 = { 'h26 };
                bins SET_TDC_DCO1_39 = { 'h27 };
                bins SET_TDC_DCO1_40 = { 'h28 };
                bins SET_TDC_DCO1_41 = { 'h29 };
                bins SET_TDC_DCO1_42 = { 'h2a };
                bins SET_TDC_DCO1_43 = { 'h2b };
                bins SET_TDC_DCO1_44 = { 'h2c };
                bins SET_TDC_DCO1_45 = { 'h2d };
                bins SET_TDC_DCO1_46 = { 'h2e };
                bins SET_TDC_DCO1_47 = { 'h2f };
                bins SET_TDC_DCO1_48 = { 'h30 };
                bins SET_TDC_DCO1_49 = { 'h31 };
                bins SET_TDC_DCO1_50 = { 'h32 };
                bins SET_TDC_DCO1_51 = { 'h33 };
                bins SET_TDC_DCO1_52 = { 'h34 };
                bins SET_TDC_DCO1_53 = { 'h35 };
                bins SET_TDC_DCO1_54 = { 'h36 };
                bins SET_TDC_DCO1_55 = { 'h37 };
                bins SET_TDC_DCO1_56 = { 'h38 };
                bins SET_TDC_DCO1_57 = { 'h39 };
                bins SET_TDC_DCO1_58 = { 'h3a };
                bins SET_TDC_DCO1_59 = { 'h3b };
                bins SET_TDC_DCO1_60 = { 'h3c };
                bins SET_TDC_DCO1_61 = { 'h3d };
                bins SET_TDC_DCO1_62 = { 'h3e };
                bins SET_TDC_DCO1_63 = { 'h3f };
                bins SET_TDC_CTRL_ALL = { 'h40 };
                bins SET_TDC_TPSEL_0 = { 'h41 };
                bins SET_TDC_TPSEL_1 = { 'h42 };
                bins SET_AFE_TDC_GLOBAL = { 'h43 };
                bins SET_AFE_GLOBAL_0 = { 'h44 };
                bins SET_AFE_GLOBAL_1 = { 'h45 };
                bins SET_DAC_VTH_H = { 'h46 };
                bins SET_DAC_VTH_L = { 'h47 };
                bins SET_DAC_VINJ_H = { 'h48 };
                bins SET_DAC_VINJ_L = { 'h49 };
                bins SET_DAC_VLDO = { 'h4a };
                bins SET_DAC_VFB = { 'h4b };
                bins SET_FTFAC_01_00 = { 'h4c };
                bins SET_FTFAC_03_02 = { 'h4d };
                bins SET_FTFAC_05_04 = { 'h4e };
                bins SET_FTFAC_07_06 = { 'h4f };
                bins SET_FTFAC_09_08 = { 'h50 };
                bins SET_FTFAC_11_10 = { 'h51 };
                bins SET_FTFAC_13_12 = { 'h52 };
                bins SET_FTFAC_15_14 = { 'h53 };
                bins SET_FTFAC_17_16 = { 'h54 };
                bins SET_FTFAC_19_18 = { 'h55 };
                bins SET_FTFAC_21_20 = { 'h56 };
                bins SET_FTFAC_23_22 = { 'h57 };
                bins SET_FTFAC_25_24 = { 'h58 };
                bins SET_FTFAC_27_26 = { 'h59 };
                bins SET_FTFAC_29_28 = { 'h5a };
                bins SET_FTFAC_31_30 = { 'h5b };
                bins SET_FTFAC_33_32 = { 'h5c };
                bins SET_FTFAC_35_34 = { 'h5d };
                bins SET_FTFAC_37_36 = { 'h5e };
                bins SET_FTFAC_39_38 = { 'h5f };
                bins SET_FTFAC_41_40 = { 'h60 };
                bins SET_FTFAC_43_42 = { 'h61 };
                bins SET_FTFAC_45_44 = { 'h62 };
                bins SET_FTFAC_47_46 = { 'h63 };
                bins SET_FTFAC_49_48 = { 'h64 };
                bins SET_FTFAC_51_50 = { 'h65 };
                bins SET_FTFAC_53_52 = { 'h66 };
                bins SET_FTFAC_55_54 = { 'h67 };
                bins SET_FTFAC_57_56 = { 'h68 };
                bins SET_FTFAC_59_58 = { 'h69 };
                bins SET_FTFAC_61_60 = { 'h6a };
                bins SET_FTFAC_63_62 = { 'h6b };
                bins COMMAND = { 'h70 };
            }

            RW: coverpoint is_read {
                bins RD = {1};
                bins WR = {0};
            }

            ACCESS: cross ADDR, RW {
            }

        endgroup: ra_cov

        // Function: new
        function new(string name = "mattonella_reg_block_default_map_coverage");
            ra_cov = new(name);
        endfunction : new

        // Function: sample
        function void sample(uvm_reg_addr_t offset, bit is_read);
            ra_cov.sample(offset, is_read);
        endfunction: sample

    endclass : mattonella_reg_block_default_map_coverage

    // Addrmap - mattonella_reg_block
    class mattonella_reg_block extends uvm_reg_block;
        `uvm_object_utils(mattonella_reg_block)

        rand tdc_reg SET_TDC_DCO1_00;
        rand tdc_reg SET_TDC_DCO1_01;
        rand tdc_reg SET_TDC_DCO1_02;
        rand tdc_reg SET_TDC_DCO1_03;
        rand tdc_reg SET_TDC_DCO1_04;
        rand tdc_reg SET_TDC_DCO1_05;
        rand tdc_reg SET_TDC_DCO1_06;
        rand tdc_reg SET_TDC_DCO1_07;
        rand tdc_reg SET_TDC_DCO1_08;
        rand tdc_reg SET_TDC_DCO1_09;
        rand tdc_reg SET_TDC_DCO1_10;
        rand tdc_reg SET_TDC_DCO1_11;
        rand tdc_reg SET_TDC_DCO1_12;
        rand tdc_reg SET_TDC_DCO1_13;
        rand tdc_reg SET_TDC_DCO1_14;
        rand tdc_reg SET_TDC_DCO1_15;
        rand tdc_reg SET_TDC_DCO1_16;
        rand tdc_reg SET_TDC_DCO1_17;
        rand tdc_reg SET_TDC_DCO1_18;
        rand tdc_reg SET_TDC_DCO1_19;
        rand tdc_reg SET_TDC_DCO1_20;
        rand tdc_reg SET_TDC_DCO1_21;
        rand tdc_reg SET_TDC_DCO1_22;
        rand tdc_reg SET_TDC_DCO1_23;
        rand tdc_reg SET_TDC_DCO1_24;
        rand tdc_reg SET_TDC_DCO1_25;
        rand tdc_reg SET_TDC_DCO1_26;
        rand tdc_reg SET_TDC_DCO1_27;
        rand tdc_reg SET_TDC_DCO1_28;
        rand tdc_reg SET_TDC_DCO1_29;
        rand tdc_reg SET_TDC_DCO1_30;
        rand tdc_reg SET_TDC_DCO1_31;
        rand tdc_reg SET_TDC_DCO1_32;
        rand tdc_reg SET_TDC_DCO1_33;
        rand tdc_reg SET_TDC_DCO1_34;
        rand tdc_reg SET_TDC_DCO1_35;
        rand tdc_reg SET_TDC_DCO1_36;
        rand tdc_reg SET_TDC_DCO1_37;
        rand tdc_reg SET_TDC_DCO1_38;
        rand tdc_reg SET_TDC_DCO1_39;
        rand tdc_reg SET_TDC_DCO1_40;
        rand tdc_reg SET_TDC_DCO1_41;
        rand tdc_reg SET_TDC_DCO1_42;
        rand tdc_reg SET_TDC_DCO1_43;
        rand tdc_reg SET_TDC_DCO1_44;
        rand tdc_reg SET_TDC_DCO1_45;
        rand tdc_reg SET_TDC_DCO1_46;
        rand tdc_reg SET_TDC_DCO1_47;
        rand tdc_reg SET_TDC_DCO1_48;
        rand tdc_reg SET_TDC_DCO1_49;
        rand tdc_reg SET_TDC_DCO1_50;
        rand tdc_reg SET_TDC_DCO1_51;
        rand tdc_reg SET_TDC_DCO1_52;
        rand tdc_reg SET_TDC_DCO1_53;
        rand tdc_reg SET_TDC_DCO1_54;
        rand tdc_reg SET_TDC_DCO1_55;
        rand tdc_reg SET_TDC_DCO1_56;
        rand tdc_reg SET_TDC_DCO1_57;
        rand tdc_reg SET_TDC_DCO1_58;
        rand tdc_reg SET_TDC_DCO1_59;
        rand tdc_reg SET_TDC_DCO1_60;
        rand tdc_reg SET_TDC_DCO1_61;
        rand tdc_reg SET_TDC_DCO1_62;
        rand tdc_reg SET_TDC_DCO1_63;
        rand tdc_ctrl_reg SET_TDC_CTRL_ALL;
        rand tdc_tpsel_reg SET_TDC_TPSEL_0;
        rand tdc_tpsel_reg SET_TDC_TPSEL_1;
        rand afe_tdc_global_reg SET_AFE_TDC_GLOBAL;
        rand afe_global0_reg SET_AFE_GLOBAL_0;
        rand afe_global1_reg SET_AFE_GLOBAL_1;
        rand dac_vth_h_reg SET_DAC_VTH_H;
        rand dac_vth_l_reg SET_DAC_VTH_L;
        rand dac_vinj_h_reg SET_DAC_VINJ_H;
        rand dac_vinj_l_reg SET_DAC_VINJ_L;
        rand dac_vldo_reg SET_DAC_VLDO;
        rand dac_vfb_reg SET_DAC_VFB;
        rand ftdac_reg SET_FTFAC_01_00;
        rand ftdac_reg SET_FTFAC_03_02;
        rand ftdac_reg SET_FTFAC_05_04;
        rand ftdac_reg SET_FTFAC_07_06;
        rand ftdac_reg SET_FTFAC_09_08;
        rand ftdac_reg SET_FTFAC_11_10;
        rand ftdac_reg SET_FTFAC_13_12;
        rand ftdac_reg SET_FTFAC_15_14;
        rand ftdac_reg SET_FTFAC_17_16;
        rand ftdac_reg SET_FTFAC_19_18;
        rand ftdac_reg SET_FTFAC_21_20;
        rand ftdac_reg SET_FTFAC_23_22;
        rand ftdac_reg SET_FTFAC_25_24;
        rand ftdac_reg SET_FTFAC_27_26;
        rand ftdac_reg SET_FTFAC_29_28;
        rand ftdac_reg SET_FTFAC_31_30;
        rand ftdac_reg SET_FTFAC_33_32;
        rand ftdac_reg SET_FTFAC_35_34;
        rand ftdac_reg SET_FTFAC_37_36;
        rand ftdac_reg SET_FTFAC_39_38;
        rand ftdac_reg SET_FTFAC_41_40;
        rand ftdac_reg SET_FTFAC_43_42;
        rand ftdac_reg SET_FTFAC_45_44;
        rand ftdac_reg SET_FTFAC_47_46;
        rand ftdac_reg SET_FTFAC_49_48;
        rand ftdac_reg SET_FTFAC_51_50;
        rand ftdac_reg SET_FTFAC_53_52;
        rand ftdac_reg SET_FTFAC_55_54;
        rand ftdac_reg SET_FTFAC_57_56;
        rand ftdac_reg SET_FTFAC_59_58;
        rand ftdac_reg SET_FTFAC_61_60;
        rand ftdac_reg SET_FTFAC_63_62;
        rand cmd_reg COMMAND;

        mattonella_reg_block_default_map_coverage default_map_cg;

        // Function: new
        function new(string name = "mattonella_reg_block");
            super.new(name, build_coverage(UVM_CVR_ALL));
        endfunction : new

        // Function: build
        virtual function void build();
            this.default_map = create_map("reg_map", 0, 1, UVM_NO_ENDIAN);

            if(has_coverage(UVM_CVR_ADDR_MAP)) begin
                default_map_cg = mattonella_reg_block_default_map_coverage::type_id::create("default_map_cg");
                default_map_cg.ra_cov.set_inst_name(this.get_full_name());
                void'(set_coverage(UVM_CVR_ADDR_MAP));
            end
            
            this.SET_TDC_DCO1_00 = tdc_reg::type_id::create("SET_TDC_DCO1_00");
            this.SET_TDC_DCO1_00.configure(this);
            this.SET_TDC_DCO1_00.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_00, 'h0);
                
            this.SET_TDC_DCO1_01 = tdc_reg::type_id::create("SET_TDC_DCO1_01");
            this.SET_TDC_DCO1_01.configure(this);
            this.SET_TDC_DCO1_01.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_01, 'h1);
                
            this.SET_TDC_DCO1_02 = tdc_reg::type_id::create("SET_TDC_DCO1_02");
            this.SET_TDC_DCO1_02.configure(this);
            this.SET_TDC_DCO1_02.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_02, 'h2);
                
            this.SET_TDC_DCO1_03 = tdc_reg::type_id::create("SET_TDC_DCO1_03");
            this.SET_TDC_DCO1_03.configure(this);
            this.SET_TDC_DCO1_03.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_03, 'h3);
                
            this.SET_TDC_DCO1_04 = tdc_reg::type_id::create("SET_TDC_DCO1_04");
            this.SET_TDC_DCO1_04.configure(this);
            this.SET_TDC_DCO1_04.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_04, 'h4);
                
            this.SET_TDC_DCO1_05 = tdc_reg::type_id::create("SET_TDC_DCO1_05");
            this.SET_TDC_DCO1_05.configure(this);
            this.SET_TDC_DCO1_05.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_05, 'h5);
                
            this.SET_TDC_DCO1_06 = tdc_reg::type_id::create("SET_TDC_DCO1_06");
            this.SET_TDC_DCO1_06.configure(this);
            this.SET_TDC_DCO1_06.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_06, 'h6);
                
            this.SET_TDC_DCO1_07 = tdc_reg::type_id::create("SET_TDC_DCO1_07");
            this.SET_TDC_DCO1_07.configure(this);
            this.SET_TDC_DCO1_07.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_07, 'h7);
                
            this.SET_TDC_DCO1_08 = tdc_reg::type_id::create("SET_TDC_DCO1_08");
            this.SET_TDC_DCO1_08.configure(this);
            this.SET_TDC_DCO1_08.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_08, 'h8);
                
            this.SET_TDC_DCO1_09 = tdc_reg::type_id::create("SET_TDC_DCO1_09");
            this.SET_TDC_DCO1_09.configure(this);
            this.SET_TDC_DCO1_09.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_09, 'h9);
                
            this.SET_TDC_DCO1_10 = tdc_reg::type_id::create("SET_TDC_DCO1_10");
            this.SET_TDC_DCO1_10.configure(this);
            this.SET_TDC_DCO1_10.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_10, 'ha);
                
            this.SET_TDC_DCO1_11 = tdc_reg::type_id::create("SET_TDC_DCO1_11");
            this.SET_TDC_DCO1_11.configure(this);
            this.SET_TDC_DCO1_11.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_11, 'hb);
                
            this.SET_TDC_DCO1_12 = tdc_reg::type_id::create("SET_TDC_DCO1_12");
            this.SET_TDC_DCO1_12.configure(this);
            this.SET_TDC_DCO1_12.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_12, 'hc);
                
            this.SET_TDC_DCO1_13 = tdc_reg::type_id::create("SET_TDC_DCO1_13");
            this.SET_TDC_DCO1_13.configure(this);
            this.SET_TDC_DCO1_13.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_13, 'hd);
                
            this.SET_TDC_DCO1_14 = tdc_reg::type_id::create("SET_TDC_DCO1_14");
            this.SET_TDC_DCO1_14.configure(this);
            this.SET_TDC_DCO1_14.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_14, 'he);
                
            this.SET_TDC_DCO1_15 = tdc_reg::type_id::create("SET_TDC_DCO1_15");
            this.SET_TDC_DCO1_15.configure(this);
            this.SET_TDC_DCO1_15.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_15, 'hf);
                
            this.SET_TDC_DCO1_16 = tdc_reg::type_id::create("SET_TDC_DCO1_16");
            this.SET_TDC_DCO1_16.configure(this);
            this.SET_TDC_DCO1_16.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_16, 'h10);
                
            this.SET_TDC_DCO1_17 = tdc_reg::type_id::create("SET_TDC_DCO1_17");
            this.SET_TDC_DCO1_17.configure(this);
            this.SET_TDC_DCO1_17.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_17, 'h11);
                
            this.SET_TDC_DCO1_18 = tdc_reg::type_id::create("SET_TDC_DCO1_18");
            this.SET_TDC_DCO1_18.configure(this);
            this.SET_TDC_DCO1_18.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_18, 'h12);
                
            this.SET_TDC_DCO1_19 = tdc_reg::type_id::create("SET_TDC_DCO1_19");
            this.SET_TDC_DCO1_19.configure(this);
            this.SET_TDC_DCO1_19.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_19, 'h13);
                
            this.SET_TDC_DCO1_20 = tdc_reg::type_id::create("SET_TDC_DCO1_20");
            this.SET_TDC_DCO1_20.configure(this);
            this.SET_TDC_DCO1_20.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_20, 'h14);
                
            this.SET_TDC_DCO1_21 = tdc_reg::type_id::create("SET_TDC_DCO1_21");
            this.SET_TDC_DCO1_21.configure(this);
            this.SET_TDC_DCO1_21.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_21, 'h15);
                
            this.SET_TDC_DCO1_22 = tdc_reg::type_id::create("SET_TDC_DCO1_22");
            this.SET_TDC_DCO1_22.configure(this);
            this.SET_TDC_DCO1_22.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_22, 'h16);
                
            this.SET_TDC_DCO1_23 = tdc_reg::type_id::create("SET_TDC_DCO1_23");
            this.SET_TDC_DCO1_23.configure(this);
            this.SET_TDC_DCO1_23.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_23, 'h17);
                
            this.SET_TDC_DCO1_24 = tdc_reg::type_id::create("SET_TDC_DCO1_24");
            this.SET_TDC_DCO1_24.configure(this);
            this.SET_TDC_DCO1_24.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_24, 'h18);
                
            this.SET_TDC_DCO1_25 = tdc_reg::type_id::create("SET_TDC_DCO1_25");
            this.SET_TDC_DCO1_25.configure(this);
            this.SET_TDC_DCO1_25.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_25, 'h19);
                
            this.SET_TDC_DCO1_26 = tdc_reg::type_id::create("SET_TDC_DCO1_26");
            this.SET_TDC_DCO1_26.configure(this);
            this.SET_TDC_DCO1_26.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_26, 'h1a);
                
            this.SET_TDC_DCO1_27 = tdc_reg::type_id::create("SET_TDC_DCO1_27");
            this.SET_TDC_DCO1_27.configure(this);
            this.SET_TDC_DCO1_27.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_27, 'h1b);
                
            this.SET_TDC_DCO1_28 = tdc_reg::type_id::create("SET_TDC_DCO1_28");
            this.SET_TDC_DCO1_28.configure(this);
            this.SET_TDC_DCO1_28.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_28, 'h1c);
                
            this.SET_TDC_DCO1_29 = tdc_reg::type_id::create("SET_TDC_DCO1_29");
            this.SET_TDC_DCO1_29.configure(this);
            this.SET_TDC_DCO1_29.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_29, 'h1d);
                
            this.SET_TDC_DCO1_30 = tdc_reg::type_id::create("SET_TDC_DCO1_30");
            this.SET_TDC_DCO1_30.configure(this);
            this.SET_TDC_DCO1_30.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_30, 'h1e);
                
            this.SET_TDC_DCO1_31 = tdc_reg::type_id::create("SET_TDC_DCO1_31");
            this.SET_TDC_DCO1_31.configure(this);
            this.SET_TDC_DCO1_31.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_31, 'h1f);
                
            this.SET_TDC_DCO1_32 = tdc_reg::type_id::create("SET_TDC_DCO1_32");
            this.SET_TDC_DCO1_32.configure(this);
            this.SET_TDC_DCO1_32.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_32, 'h20);
                
            this.SET_TDC_DCO1_33 = tdc_reg::type_id::create("SET_TDC_DCO1_33");
            this.SET_TDC_DCO1_33.configure(this);
            this.SET_TDC_DCO1_33.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_33, 'h21);
                
            this.SET_TDC_DCO1_34 = tdc_reg::type_id::create("SET_TDC_DCO1_34");
            this.SET_TDC_DCO1_34.configure(this);
            this.SET_TDC_DCO1_34.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_34, 'h22);
                
            this.SET_TDC_DCO1_35 = tdc_reg::type_id::create("SET_TDC_DCO1_35");
            this.SET_TDC_DCO1_35.configure(this);
            this.SET_TDC_DCO1_35.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_35, 'h23);
                
            this.SET_TDC_DCO1_36 = tdc_reg::type_id::create("SET_TDC_DCO1_36");
            this.SET_TDC_DCO1_36.configure(this);
            this.SET_TDC_DCO1_36.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_36, 'h24);
                
            this.SET_TDC_DCO1_37 = tdc_reg::type_id::create("SET_TDC_DCO1_37");
            this.SET_TDC_DCO1_37.configure(this);
            this.SET_TDC_DCO1_37.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_37, 'h25);
                
            this.SET_TDC_DCO1_38 = tdc_reg::type_id::create("SET_TDC_DCO1_38");
            this.SET_TDC_DCO1_38.configure(this);
            this.SET_TDC_DCO1_38.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_38, 'h26);
                
            this.SET_TDC_DCO1_39 = tdc_reg::type_id::create("SET_TDC_DCO1_39");
            this.SET_TDC_DCO1_39.configure(this);
            this.SET_TDC_DCO1_39.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_39, 'h27);
                
            this.SET_TDC_DCO1_40 = tdc_reg::type_id::create("SET_TDC_DCO1_40");
            this.SET_TDC_DCO1_40.configure(this);
            this.SET_TDC_DCO1_40.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_40, 'h28);
                
            this.SET_TDC_DCO1_41 = tdc_reg::type_id::create("SET_TDC_DCO1_41");
            this.SET_TDC_DCO1_41.configure(this);
            this.SET_TDC_DCO1_41.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_41, 'h29);
                
            this.SET_TDC_DCO1_42 = tdc_reg::type_id::create("SET_TDC_DCO1_42");
            this.SET_TDC_DCO1_42.configure(this);
            this.SET_TDC_DCO1_42.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_42, 'h2a);
                
            this.SET_TDC_DCO1_43 = tdc_reg::type_id::create("SET_TDC_DCO1_43");
            this.SET_TDC_DCO1_43.configure(this);
            this.SET_TDC_DCO1_43.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_43, 'h2b);
                
            this.SET_TDC_DCO1_44 = tdc_reg::type_id::create("SET_TDC_DCO1_44");
            this.SET_TDC_DCO1_44.configure(this);
            this.SET_TDC_DCO1_44.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_44, 'h2c);
                
            this.SET_TDC_DCO1_45 = tdc_reg::type_id::create("SET_TDC_DCO1_45");
            this.SET_TDC_DCO1_45.configure(this);
            this.SET_TDC_DCO1_45.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_45, 'h2d);
                
            this.SET_TDC_DCO1_46 = tdc_reg::type_id::create("SET_TDC_DCO1_46");
            this.SET_TDC_DCO1_46.configure(this);
            this.SET_TDC_DCO1_46.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_46, 'h2e);
                
            this.SET_TDC_DCO1_47 = tdc_reg::type_id::create("SET_TDC_DCO1_47");
            this.SET_TDC_DCO1_47.configure(this);
            this.SET_TDC_DCO1_47.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_47, 'h2f);
                
            this.SET_TDC_DCO1_48 = tdc_reg::type_id::create("SET_TDC_DCO1_48");
            this.SET_TDC_DCO1_48.configure(this);
            this.SET_TDC_DCO1_48.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_48, 'h30);
                
            this.SET_TDC_DCO1_49 = tdc_reg::type_id::create("SET_TDC_DCO1_49");
            this.SET_TDC_DCO1_49.configure(this);
            this.SET_TDC_DCO1_49.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_49, 'h31);
                
            this.SET_TDC_DCO1_50 = tdc_reg::type_id::create("SET_TDC_DCO1_50");
            this.SET_TDC_DCO1_50.configure(this);
            this.SET_TDC_DCO1_50.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_50, 'h32);
                
            this.SET_TDC_DCO1_51 = tdc_reg::type_id::create("SET_TDC_DCO1_51");
            this.SET_TDC_DCO1_51.configure(this);
            this.SET_TDC_DCO1_51.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_51, 'h33);
                
            this.SET_TDC_DCO1_52 = tdc_reg::type_id::create("SET_TDC_DCO1_52");
            this.SET_TDC_DCO1_52.configure(this);
            this.SET_TDC_DCO1_52.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_52, 'h34);
                
            this.SET_TDC_DCO1_53 = tdc_reg::type_id::create("SET_TDC_DCO1_53");
            this.SET_TDC_DCO1_53.configure(this);
            this.SET_TDC_DCO1_53.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_53, 'h35);
                
            this.SET_TDC_DCO1_54 = tdc_reg::type_id::create("SET_TDC_DCO1_54");
            this.SET_TDC_DCO1_54.configure(this);
            this.SET_TDC_DCO1_54.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_54, 'h36);
                
            this.SET_TDC_DCO1_55 = tdc_reg::type_id::create("SET_TDC_DCO1_55");
            this.SET_TDC_DCO1_55.configure(this);
            this.SET_TDC_DCO1_55.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_55, 'h37);
                
            this.SET_TDC_DCO1_56 = tdc_reg::type_id::create("SET_TDC_DCO1_56");
            this.SET_TDC_DCO1_56.configure(this);
            this.SET_TDC_DCO1_56.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_56, 'h38);
                
            this.SET_TDC_DCO1_57 = tdc_reg::type_id::create("SET_TDC_DCO1_57");
            this.SET_TDC_DCO1_57.configure(this);
            this.SET_TDC_DCO1_57.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_57, 'h39);
                
            this.SET_TDC_DCO1_58 = tdc_reg::type_id::create("SET_TDC_DCO1_58");
            this.SET_TDC_DCO1_58.configure(this);
            this.SET_TDC_DCO1_58.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_58, 'h3a);
                
            this.SET_TDC_DCO1_59 = tdc_reg::type_id::create("SET_TDC_DCO1_59");
            this.SET_TDC_DCO1_59.configure(this);
            this.SET_TDC_DCO1_59.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_59, 'h3b);
                
            this.SET_TDC_DCO1_60 = tdc_reg::type_id::create("SET_TDC_DCO1_60");
            this.SET_TDC_DCO1_60.configure(this);
            this.SET_TDC_DCO1_60.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_60, 'h3c);
                
            this.SET_TDC_DCO1_61 = tdc_reg::type_id::create("SET_TDC_DCO1_61");
            this.SET_TDC_DCO1_61.configure(this);
            this.SET_TDC_DCO1_61.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_61, 'h3d);
                
            this.SET_TDC_DCO1_62 = tdc_reg::type_id::create("SET_TDC_DCO1_62");
            this.SET_TDC_DCO1_62.configure(this);
            this.SET_TDC_DCO1_62.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_62, 'h3e);
                
            this.SET_TDC_DCO1_63 = tdc_reg::type_id::create("SET_TDC_DCO1_63");
            this.SET_TDC_DCO1_63.configure(this);
            this.SET_TDC_DCO1_63.build();
            this.default_map.add_reg(this.SET_TDC_DCO1_63, 'h3f);
                
            this.SET_TDC_CTRL_ALL = tdc_ctrl_reg::type_id::create("SET_TDC_CTRL_ALL");
            this.SET_TDC_CTRL_ALL.configure(this);
            this.SET_TDC_CTRL_ALL.build();
            this.default_map.add_reg(this.SET_TDC_CTRL_ALL, 'h40);
                
            this.SET_TDC_TPSEL_0 = tdc_tpsel_reg::type_id::create("SET_TDC_TPSEL_0");
            this.SET_TDC_TPSEL_0.configure(this);
            this.SET_TDC_TPSEL_0.build();
            this.default_map.add_reg(this.SET_TDC_TPSEL_0, 'h41);
                
            this.SET_TDC_TPSEL_1 = tdc_tpsel_reg::type_id::create("SET_TDC_TPSEL_1");
            this.SET_TDC_TPSEL_1.configure(this);
            this.SET_TDC_TPSEL_1.build();
            this.default_map.add_reg(this.SET_TDC_TPSEL_1, 'h42);
                
            this.SET_AFE_TDC_GLOBAL = afe_tdc_global_reg::type_id::create("SET_AFE_TDC_GLOBAL");
            this.SET_AFE_TDC_GLOBAL.configure(this);
            this.SET_AFE_TDC_GLOBAL.build();
            this.default_map.add_reg(this.SET_AFE_TDC_GLOBAL, 'h43);
                
            this.SET_AFE_GLOBAL_0 = afe_global0_reg::type_id::create("SET_AFE_GLOBAL_0");
            this.SET_AFE_GLOBAL_0.configure(this);
            this.SET_AFE_GLOBAL_0.build();
            this.default_map.add_reg(this.SET_AFE_GLOBAL_0, 'h44);
                
            this.SET_AFE_GLOBAL_1 = afe_global1_reg::type_id::create("SET_AFE_GLOBAL_1");
            this.SET_AFE_GLOBAL_1.configure(this);
            this.SET_AFE_GLOBAL_1.build();
            this.default_map.add_reg(this.SET_AFE_GLOBAL_1, 'h45);
                
            this.SET_DAC_VTH_H = dac_vth_h_reg::type_id::create("SET_DAC_VTH_H");
            this.SET_DAC_VTH_H.configure(this);
            this.SET_DAC_VTH_H.build();
            this.default_map.add_reg(this.SET_DAC_VTH_H, 'h46);
                
            this.SET_DAC_VTH_L = dac_vth_l_reg::type_id::create("SET_DAC_VTH_L");
            this.SET_DAC_VTH_L.configure(this);
            this.SET_DAC_VTH_L.build();
            this.default_map.add_reg(this.SET_DAC_VTH_L, 'h47);
                
            this.SET_DAC_VINJ_H = dac_vinj_h_reg::type_id::create("SET_DAC_VINJ_H");
            this.SET_DAC_VINJ_H.configure(this);
            this.SET_DAC_VINJ_H.build();
            this.default_map.add_reg(this.SET_DAC_VINJ_H, 'h48);
                
            this.SET_DAC_VINJ_L = dac_vinj_l_reg::type_id::create("SET_DAC_VINJ_L");
            this.SET_DAC_VINJ_L.configure(this);
            this.SET_DAC_VINJ_L.build();
            this.default_map.add_reg(this.SET_DAC_VINJ_L, 'h49);
                
            this.SET_DAC_VLDO = dac_vldo_reg::type_id::create("SET_DAC_VLDO");
            this.SET_DAC_VLDO.configure(this);
            this.SET_DAC_VLDO.build();
            this.default_map.add_reg(this.SET_DAC_VLDO, 'h4a);
                
            this.SET_DAC_VFB = dac_vfb_reg::type_id::create("SET_DAC_VFB");
            this.SET_DAC_VFB.configure(this);
            this.SET_DAC_VFB.build();
            this.default_map.add_reg(this.SET_DAC_VFB, 'h4b);
                
            this.SET_FTFAC_01_00 = ftdac_reg::type_id::create("SET_FTFAC_01_00");
            this.SET_FTFAC_01_00.configure(this);
            this.SET_FTFAC_01_00.build();
            this.default_map.add_reg(this.SET_FTFAC_01_00, 'h4c);
                
            this.SET_FTFAC_03_02 = ftdac_reg::type_id::create("SET_FTFAC_03_02");
            this.SET_FTFAC_03_02.configure(this);
            this.SET_FTFAC_03_02.build();
            this.default_map.add_reg(this.SET_FTFAC_03_02, 'h4d);
                
            this.SET_FTFAC_05_04 = ftdac_reg::type_id::create("SET_FTFAC_05_04");
            this.SET_FTFAC_05_04.configure(this);
            this.SET_FTFAC_05_04.build();
            this.default_map.add_reg(this.SET_FTFAC_05_04, 'h4e);
                
            this.SET_FTFAC_07_06 = ftdac_reg::type_id::create("SET_FTFAC_07_06");
            this.SET_FTFAC_07_06.configure(this);
            this.SET_FTFAC_07_06.build();
            this.default_map.add_reg(this.SET_FTFAC_07_06, 'h4f);
                
            this.SET_FTFAC_09_08 = ftdac_reg::type_id::create("SET_FTFAC_09_08");
            this.SET_FTFAC_09_08.configure(this);
            this.SET_FTFAC_09_08.build();
            this.default_map.add_reg(this.SET_FTFAC_09_08, 'h50);
                
            this.SET_FTFAC_11_10 = ftdac_reg::type_id::create("SET_FTFAC_11_10");
            this.SET_FTFAC_11_10.configure(this);
            this.SET_FTFAC_11_10.build();
            this.default_map.add_reg(this.SET_FTFAC_11_10, 'h51);
                
            this.SET_FTFAC_13_12 = ftdac_reg::type_id::create("SET_FTFAC_13_12");
            this.SET_FTFAC_13_12.configure(this);
            this.SET_FTFAC_13_12.build();
            this.default_map.add_reg(this.SET_FTFAC_13_12, 'h52);
                
            this.SET_FTFAC_15_14 = ftdac_reg::type_id::create("SET_FTFAC_15_14");
            this.SET_FTFAC_15_14.configure(this);
            this.SET_FTFAC_15_14.build();
            this.default_map.add_reg(this.SET_FTFAC_15_14, 'h53);
                
            this.SET_FTFAC_17_16 = ftdac_reg::type_id::create("SET_FTFAC_17_16");
            this.SET_FTFAC_17_16.configure(this);
            this.SET_FTFAC_17_16.build();
            this.default_map.add_reg(this.SET_FTFAC_17_16, 'h54);
                
            this.SET_FTFAC_19_18 = ftdac_reg::type_id::create("SET_FTFAC_19_18");
            this.SET_FTFAC_19_18.configure(this);
            this.SET_FTFAC_19_18.build();
            this.default_map.add_reg(this.SET_FTFAC_19_18, 'h55);
                
            this.SET_FTFAC_21_20 = ftdac_reg::type_id::create("SET_FTFAC_21_20");
            this.SET_FTFAC_21_20.configure(this);
            this.SET_FTFAC_21_20.build();
            this.default_map.add_reg(this.SET_FTFAC_21_20, 'h56);
                
            this.SET_FTFAC_23_22 = ftdac_reg::type_id::create("SET_FTFAC_23_22");
            this.SET_FTFAC_23_22.configure(this);
            this.SET_FTFAC_23_22.build();
            this.default_map.add_reg(this.SET_FTFAC_23_22, 'h57);
                
            this.SET_FTFAC_25_24 = ftdac_reg::type_id::create("SET_FTFAC_25_24");
            this.SET_FTFAC_25_24.configure(this);
            this.SET_FTFAC_25_24.build();
            this.default_map.add_reg(this.SET_FTFAC_25_24, 'h58);
                
            this.SET_FTFAC_27_26 = ftdac_reg::type_id::create("SET_FTFAC_27_26");
            this.SET_FTFAC_27_26.configure(this);
            this.SET_FTFAC_27_26.build();
            this.default_map.add_reg(this.SET_FTFAC_27_26, 'h59);
                
            this.SET_FTFAC_29_28 = ftdac_reg::type_id::create("SET_FTFAC_29_28");
            this.SET_FTFAC_29_28.configure(this);
            this.SET_FTFAC_29_28.build();
            this.default_map.add_reg(this.SET_FTFAC_29_28, 'h5a);
                
            this.SET_FTFAC_31_30 = ftdac_reg::type_id::create("SET_FTFAC_31_30");
            this.SET_FTFAC_31_30.configure(this);
            this.SET_FTFAC_31_30.build();
            this.default_map.add_reg(this.SET_FTFAC_31_30, 'h5b);
                
            this.SET_FTFAC_33_32 = ftdac_reg::type_id::create("SET_FTFAC_33_32");
            this.SET_FTFAC_33_32.configure(this);
            this.SET_FTFAC_33_32.build();
            this.default_map.add_reg(this.SET_FTFAC_33_32, 'h5c);
                
            this.SET_FTFAC_35_34 = ftdac_reg::type_id::create("SET_FTFAC_35_34");
            this.SET_FTFAC_35_34.configure(this);
            this.SET_FTFAC_35_34.build();
            this.default_map.add_reg(this.SET_FTFAC_35_34, 'h5d);
                
            this.SET_FTFAC_37_36 = ftdac_reg::type_id::create("SET_FTFAC_37_36");
            this.SET_FTFAC_37_36.configure(this);
            this.SET_FTFAC_37_36.build();
            this.default_map.add_reg(this.SET_FTFAC_37_36, 'h5e);
                
            this.SET_FTFAC_39_38 = ftdac_reg::type_id::create("SET_FTFAC_39_38");
            this.SET_FTFAC_39_38.configure(this);
            this.SET_FTFAC_39_38.build();
            this.default_map.add_reg(this.SET_FTFAC_39_38, 'h5f);
                
            this.SET_FTFAC_41_40 = ftdac_reg::type_id::create("SET_FTFAC_41_40");
            this.SET_FTFAC_41_40.configure(this);
            this.SET_FTFAC_41_40.build();
            this.default_map.add_reg(this.SET_FTFAC_41_40, 'h60);
                
            this.SET_FTFAC_43_42 = ftdac_reg::type_id::create("SET_FTFAC_43_42");
            this.SET_FTFAC_43_42.configure(this);
            this.SET_FTFAC_43_42.build();
            this.default_map.add_reg(this.SET_FTFAC_43_42, 'h61);
                
            this.SET_FTFAC_45_44 = ftdac_reg::type_id::create("SET_FTFAC_45_44");
            this.SET_FTFAC_45_44.configure(this);
            this.SET_FTFAC_45_44.build();
            this.default_map.add_reg(this.SET_FTFAC_45_44, 'h62);
                
            this.SET_FTFAC_47_46 = ftdac_reg::type_id::create("SET_FTFAC_47_46");
            this.SET_FTFAC_47_46.configure(this);
            this.SET_FTFAC_47_46.build();
            this.default_map.add_reg(this.SET_FTFAC_47_46, 'h63);
                
            this.SET_FTFAC_49_48 = ftdac_reg::type_id::create("SET_FTFAC_49_48");
            this.SET_FTFAC_49_48.configure(this);
            this.SET_FTFAC_49_48.build();
            this.default_map.add_reg(this.SET_FTFAC_49_48, 'h64);
                
            this.SET_FTFAC_51_50 = ftdac_reg::type_id::create("SET_FTFAC_51_50");
            this.SET_FTFAC_51_50.configure(this);
            this.SET_FTFAC_51_50.build();
            this.default_map.add_reg(this.SET_FTFAC_51_50, 'h65);
                
            this.SET_FTFAC_53_52 = ftdac_reg::type_id::create("SET_FTFAC_53_52");
            this.SET_FTFAC_53_52.configure(this);
            this.SET_FTFAC_53_52.build();
            this.default_map.add_reg(this.SET_FTFAC_53_52, 'h66);
                
            this.SET_FTFAC_55_54 = ftdac_reg::type_id::create("SET_FTFAC_55_54");
            this.SET_FTFAC_55_54.configure(this);
            this.SET_FTFAC_55_54.build();
            this.default_map.add_reg(this.SET_FTFAC_55_54, 'h67);
                
            this.SET_FTFAC_57_56 = ftdac_reg::type_id::create("SET_FTFAC_57_56");
            this.SET_FTFAC_57_56.configure(this);
            this.SET_FTFAC_57_56.build();
            this.default_map.add_reg(this.SET_FTFAC_57_56, 'h68);
                
            this.SET_FTFAC_59_58 = ftdac_reg::type_id::create("SET_FTFAC_59_58");
            this.SET_FTFAC_59_58.configure(this);
            this.SET_FTFAC_59_58.build();
            this.default_map.add_reg(this.SET_FTFAC_59_58, 'h69);
                
            this.SET_FTFAC_61_60 = ftdac_reg::type_id::create("SET_FTFAC_61_60");
            this.SET_FTFAC_61_60.configure(this);
            this.SET_FTFAC_61_60.build();
            this.default_map.add_reg(this.SET_FTFAC_61_60, 'h6a);
                
            this.SET_FTFAC_63_62 = ftdac_reg::type_id::create("SET_FTFAC_63_62");
            this.SET_FTFAC_63_62.configure(this);
            this.SET_FTFAC_63_62.build();
            this.default_map.add_reg(this.SET_FTFAC_63_62, 'h6b);
                
            this.COMMAND = cmd_reg::type_id::create("COMMAND");
            this.COMMAND.configure(this);
            this.COMMAND.build();
            this.default_map.add_reg(this.COMMAND, 'h70);
                
        endfunction : build

        // Function: sample
        protected virtual function void sample(uvm_reg_addr_t offset, bit is_read, uvm_reg_map map);
           if(get_coverage(UVM_CVR_ADDR_MAP)) begin
              if(map.get_name() == "default_map") begin
                 default_map_cg.sample(offset, is_read);
              end
           end
        endfunction: sample

    endclass : mattonella_reg_block

endpackage: ral_regs_pkg